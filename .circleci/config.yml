version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  aws:
    docker:
      - image: amazon/aws-cli
  python:
    docker:
      - image: python:3.9.0-alpine

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments - frontend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      # - run:
      #     name: Delete S3 - frontend
      #     when: on_fail
      #     command: |
      #       aws s3 rb s3://WebsiteBucket --force  
      - run:
          name: Destroy environments - backend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl --insecure https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm run migrations:revert
            fi

  install-awscli:
    description: Install AWS CLI
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install   

  install-ansible:
    description: Install ansible
    steps:
      - run:
          name: Install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y      

  install-nodejs:
    description: Install nodejs
    steps:
      - run:
          name: Install nodejs
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo opt install -y nodejs

jobs:
  npm-backend:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules

  npm-frontend:
   executor: node
   steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules

  build-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist

  build-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Back-end build
          command: |
            cd backend
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist

  test-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Front-end test
          working_directory: ./frontend
          command: |
            npm run test
                
  test-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Backend-end test
          working_directory: ./backend
          command: |
            npm run test
            
  scan-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: install oauth-sign
          working_directory: ./frontend
          command: |
            npm install oauth-sign@^0.9.0
      - run:
          name: Front-end scan
          working_directory: ./frontend
          command: |
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm audit fix
          working_directory: ./backend   
          command: |
            npm audit fix --force     
      - run:
          name: Back-end scan
          working_directory: ./backend
          command: |
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment  

  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["01:f3:66:03:06:82:06:6a:af:65:cb:71:d9:c5:b7:70"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment  

  run-migrations:
    executor: node
    steps:
      - checkout
      - install-awscli
      - attach_workspace:
          at: .
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment  
      - revert-migrations     

  deploy-frontend:
    executor: node
    steps:
      - checkout
      - install-awscli
      - install-nodejs
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            # yum -y install tar gzip
            # apk add --update ansible
            # ansible --version
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)

            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      - destroy-environment  
      - revert-migrations        
                    
  deploy-backend:
    executor: python
    steps:
      - checkout
      - install-awscli
      - install-ansible
      - install-nodejs
      - add_ssh_keys:
          fingerprints: ["01:f3:66:03:06:82:06:6a:af:65:cb:71:d9:c5:b7:70"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            yum -y install nodejs
            yum -y install tar gzip
      - run:
          name: Package backend
          command: |
            cd backend
            npm rum build
            tar -czf artifact.tar.gz dist/* package*

            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist
      - destroy-environment  
      - revert-migrations      

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - npm-frontend
      - npm-backend
      
      - build-frontend:
          requires: [npm-frontend]  
      - build-backend:
          requires: [npm-backend]  

      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]

      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]

      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]

      - run-migrations:
          requires: [configure-infrastructure]

      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]